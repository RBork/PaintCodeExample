//
//  StyleKit.swift
//  Example
//
//  Created by Martin on 1.11.16.
//  Copyright Â© 2016 PixelCut. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfBlueRect: UIImage?
        static var blueRectTargets: [AnyObject]?
        static var imageOfStore: UIImage?
        static var storeTargets: [AnyObject]?
        static var imageOfSoup: UIImage?
        static var soupTargets: [AnyObject]?
        static var imageOfTabBarBackground: UIImage?
        static var tabBarBackgroundTargets: [AnyObject]?
        static var imageOfSelectionIndicator: UIImage?
        static var selectionIndicatorTargets: [AnyObject]?
        static var imageOfShadowImage: UIImage?
        static var shadowImageTargets: [AnyObject]?
        static var imageOfProjectIcon: UIImage?
        static var projectIconTargets: [AnyObject]?
    }

    //// Drawing Methods

    public dynamic class func drawBlueRect() {
        //// Color Declarations
        let color = UIColor(red: 0.000, green: 0.760, blue: 1.000, alpha: 1.000)
        var colorHueComponent: CGFloat = 1
        var colorSaturationComponent: CGFloat = 1
        var colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let darkColor = UIColor(hue: colorHueComponent, saturation: colorSaturationComponent, brightness: 0.6, alpha: color.cgColor.alpha)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 7.5, y: 7.5, width: 50, height: 50), cornerRadius: 10)
        color.setFill()
        rectanglePath.fill()
        darkColor.setStroke()
        rectanglePath.lineWidth = 5
        rectanglePath.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 22.25, y: 21.75, width: 21, height: 21))
        UIColor.white.setFill()
        ovalPath.fill()
        darkColor.setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
    }

    public dynamic class func drawBlueRectFramed(frame: CGRect = CGRect(x: 0, y: 0, width: 65, height: 65)) {
        //// Color Declarations
        let color = UIColor(red: 0.000, green: 0.760, blue: 1.000, alpha: 1.000)
        var colorHueComponent: CGFloat = 1
        var colorSaturationComponent: CGFloat = 1
        var colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let darkColor = UIColor(hue: colorHueComponent, saturation: colorSaturationComponent, brightness: 0.6, alpha: color.cgColor.alpha)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: frame.minX + 7.5, y: frame.minY + 7.5, width: frame.width - 15, height: frame.height - 15), cornerRadius: 10)
        color.setFill()
        rectanglePath.fill()
        darkColor.setStroke()
        rectanglePath.lineWidth = 5
        rectanglePath.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 22.25, y: frame.minY + 21.75, width: frame.width - 44, height: frame.height - 44))
        UIColor.white.setFill()
        ovalPath.fill()
        darkColor.setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
    }

    public dynamic class func drawStore() {

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 26.96, y: 13.68))
        ovalPath.addCurve(to: CGPoint(x: 24.95, y: 8.76), controlPoint1: CGPoint(x: 27.19, y: 11.92), controlPoint2: CGPoint(x: 26.52, y: 10.1))
        ovalPath.addCurve(to: CGPoint(x: 15.05, y: 8.76), controlPoint1: CGPoint(x: 22.22, y: 6.41), controlPoint2: CGPoint(x: 17.78, y: 6.41))
        ovalPath.addCurve(to: CGPoint(x: 13.14, y: 14.19), controlPoint1: CGPoint(x: 13.33, y: 10.23), controlPoint2: CGPoint(x: 12.69, y: 12.28))
        UIColor.gray.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 23.99, y: 16.67))
        bezierPath.addCurve(to: CGPoint(x: 21.53, y: 17.54), controlPoint1: CGPoint(x: 23.06, y: 16.67), controlPoint2: CGPoint(x: 22.24, y: 16.96))
        bezierPath.addCurve(to: CGPoint(x: 20.01, y: 20.07), controlPoint1: CGPoint(x: 20.82, y: 18.12), controlPoint2: CGPoint(x: 20.31, y: 18.96))
        bezierPath.addCurve(to: CGPoint(x: 16.05, y: 16.67), controlPoint1: CGPoint(x: 19.26, y: 17.8), controlPoint2: CGPoint(x: 17.94, y: 16.67))
        bezierPath.addCurve(to: CGPoint(x: 13.54, y: 17.69), controlPoint1: CGPoint(x: 15.06, y: 16.67), controlPoint2: CGPoint(x: 14.22, y: 17.01))
        bezierPath.addCurve(to: CGPoint(x: 12.51, y: 20.2), controlPoint1: CGPoint(x: 12.85, y: 18.37), controlPoint2: CGPoint(x: 12.51, y: 19.21))
        bezierPath.addCurve(to: CGPoint(x: 12.84, y: 21.93), controlPoint1: CGPoint(x: 12.51, y: 20.79), controlPoint2: CGPoint(x: 12.62, y: 21.36))
        bezierPath.addCurve(to: CGPoint(x: 13.03, y: 22.37), controlPoint1: CGPoint(x: 12.9, y: 22.08), controlPoint2: CGPoint(x: 12.96, y: 22.23))
        bezierPath.addCurve(to: CGPoint(x: 14.64, y: 24.8), controlPoint1: CGPoint(x: 13.28, y: 22.89), controlPoint2: CGPoint(x: 13.82, y: 23.7))
        bezierPath.addCurve(to: CGPoint(x: 15.69, y: 26.17), controlPoint1: CGPoint(x: 14.95, y: 25.21), controlPoint2: CGPoint(x: 15.3, y: 25.67))
        bezierPath.addCurve(to: CGPoint(x: 18.74, y: 30.47), controlPoint1: CGPoint(x: 17.11, y: 28), controlPoint2: CGPoint(x: 18.13, y: 29.43))
        bezierPath.addCurve(to: CGPoint(x: 20.01, y: 33.6), controlPoint1: CGPoint(x: 19.34, y: 31.51), controlPoint2: CGPoint(x: 19.77, y: 32.55))
        bezierPath.addCurve(to: CGPoint(x: 24.54, y: 26.03), controlPoint1: CGPoint(x: 20.46, y: 31.74), controlPoint2: CGPoint(x: 21.97, y: 29.22))
        bezierPath.addCurve(to: CGPoint(x: 26.77, y: 22.76), controlPoint1: CGPoint(x: 25.55, y: 24.8), controlPoint2: CGPoint(x: 26.29, y: 23.71))
        bezierPath.addCurve(to: CGPoint(x: 27.49, y: 20.01), controlPoint1: CGPoint(x: 27.25, y: 21.81), controlPoint2: CGPoint(x: 27.49, y: 20.9))
        bezierPath.addCurve(to: CGPoint(x: 26.43, y: 17.68), controlPoint1: CGPoint(x: 27.49, y: 19.13), controlPoint2: CGPoint(x: 27.14, y: 18.35))
        bezierPath.addCurve(to: CGPoint(x: 23.99, y: 16.67), controlPoint1: CGPoint(x: 25.73, y: 17), controlPoint2: CGPoint(x: 24.92, y: 16.67))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 34.5, y: 36.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 36.5))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 32.5, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 34.5, y: 36.5))
        bezierPath.close()
        UIColor.gray.setFill()
        bezierPath.fill()
        UIColor.gray.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    public dynamic class func drawSoup() {

        //// Group
        //// Cup Drawing
        let cupPath = UIBezierPath()
        cupPath.move(to: CGPoint(x: 22.96, y: 6.5))
        cupPath.addCurve(to: CGPoint(x: 25, y: 10.2), controlPoint1: CGPoint(x: 22.95, y: 6.5), controlPoint2: CGPoint(x: 25, y: 6.91))
        cupPath.addCurve(to: CGPoint(x: 22.55, y: 15.14), controlPoint1: CGPoint(x: 25, y: 11.85), controlPoint2: CGPoint(x: 22.55, y: 13.08))
        cupPath.addCurve(to: CGPoint(x: 22.55, y: 19.25), controlPoint1: CGPoint(x: 22.55, y: 17.61), controlPoint2: CGPoint(x: 22.55, y: 19.25))
        cupPath.addCurve(to: CGPoint(x: 20.91, y: 15.14), controlPoint1: CGPoint(x: 22.55, y: 19.25), controlPoint2: CGPoint(x: 20.91, y: 16.78))
        cupPath.addCurve(to: CGPoint(x: 23.36, y: 10.2), controlPoint1: CGPoint(x: 20.91, y: 12.67), controlPoint2: CGPoint(x: 22.95, y: 12.05))
        cupPath.addCurve(to: CGPoint(x: 22.95, y: 6.5), controlPoint1: CGPoint(x: 23.77, y: 8.35), controlPoint2: CGPoint(x: 22.95, y: 6.5))
        cupPath.addLine(to: CGPoint(x: 22.96, y: 6.5))
        cupPath.close()
        UIColor.gray.setFill()
        cupPath.fill()


        //// Cup 2 Drawing
        let cup2Path = UIBezierPath()
        cup2Path.move(to: CGPoint(x: 17.07, y: 7.32))
        cup2Path.addCurve(to: CGPoint(x: 19.09, y: 11.03), controlPoint1: CGPoint(x: 17.05, y: 7.32), controlPoint2: CGPoint(x: 18.99, y: 7.22))
        cup2Path.addCurve(to: CGPoint(x: 17.45, y: 16.78), controlPoint1: CGPoint(x: 19.12, y: 12.15), controlPoint2: CGPoint(x: 17.45, y: 14.32))
        cup2Path.addCurve(to: CGPoint(x: 18.27, y: 21.72), controlPoint1: CGPoint(x: 17.45, y: 19.25), controlPoint2: CGPoint(x: 18.27, y: 21.72))
        cup2Path.addCurve(to: CGPoint(x: 15.82, y: 16.78), controlPoint1: CGPoint(x: 18.27, y: 21.72), controlPoint2: CGPoint(x: 15.82, y: 19.25))
        cup2Path.addCurve(to: CGPoint(x: 17.45, y: 11.03), controlPoint1: CGPoint(x: 15.82, y: 14.32), controlPoint2: CGPoint(x: 17.05, y: 12.88))
        cup2Path.addCurve(to: CGPoint(x: 17.05, y: 7.32), controlPoint1: CGPoint(x: 17.86, y: 9.17), controlPoint2: CGPoint(x: 17.05, y: 7.32))
        cup2Path.addLine(to: CGPoint(x: 17.07, y: 7.32))
        cup2Path.close()
        UIColor.gray.setFill()
        cup2Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 5, y: 22))
        ovalPath.addCurve(to: CGPoint(x: 9.39, y: 32.61), controlPoint1: CGPoint(x: 4.97, y: 25.88), controlPoint2: CGPoint(x: 6.43, y: 29.65))
        ovalPath.addCurve(to: CGPoint(x: 30.61, y: 32.61), controlPoint1: CGPoint(x: 15.25, y: 38.46), controlPoint2: CGPoint(x: 24.75, y: 38.46))
        ovalPath.addCurve(to: CGPoint(x: 35, y: 21.99), controlPoint1: CGPoint(x: 33.54, y: 29.68), controlPoint2: CGPoint(x: 35, y: 25.84))
        ovalPath.addLine(to: CGPoint(x: 5, y: 22))
        ovalPath.close()
        UIColor.gray.setFill()
        ovalPath.fill()
    }

    public dynamic class func drawTabBarBackground() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let backgroundTop = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)
        var backgroundTopRedComponent: CGFloat = 1
        var backgroundTopGreenComponent: CGFloat = 1
        var backgroundTopBlueComponent: CGFloat = 1
        backgroundTop.getRed(&backgroundTopRedComponent, green: &backgroundTopGreenComponent, blue: &backgroundTopBlueComponent, alpha: nil)

        let backgroundBottom = UIColor(red: (backgroundTopRedComponent * 0.5), green: (backgroundTopGreenComponent * 0.5), blue: (backgroundTopBlueComponent * 0.5), alpha: (backgroundTop.cgColor.alpha * 0.5 + 0.5))

        //// Gradient Declarations
        let tabBarGradient = CGGradient(colorsSpace: nil, colors: [backgroundTop.cgColor, backgroundBottom.cgColor] as CFArray, locations: [0, 1])!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 40, height: 40))
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(tabBarGradient, start: CGPoint(x: 20, y: -0), end: CGPoint(x: 20, y: 40), options: [])
        context.restoreGState()
    }

    public dynamic class func drawSelectionIndicator() {
        //// Color Declarations
        let tabBarSelectionColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.600)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 40, height: 40), cornerRadius: 4)
        tabBarSelectionColor.setFill()
        rectanglePath.fill()
    }

    public dynamic class func drawShadowImage() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Shadow Declarations
        let tabBarShadow = NSShadow()
        tabBarShadow.shadowColor = UIColor.black.withAlphaComponent(0.76)
        tabBarShadow.shadowOffset = CGSize(width: 0, height: 0)
        tabBarShadow.shadowBlurRadius = 5

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -4, y: 8, width: 48, height: 2))
        context.saveGState()
        context.setShadow(offset: tabBarShadow.shadowOffset, blur: tabBarShadow.shadowBlurRadius, color: (tabBarShadow.shadowColor as! UIColor).cgColor)
        UIColor.gray.setFill()
        rectanglePath.fill()
        context.restoreGState()
    }

    public dynamic class func drawButton(selected: Bool = false, highlighted: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let buttonSelected = UIColor(red: 0.867, green: 0.404, blue: 0.341, alpha: 1.000)
        var buttonSelectedRedComponent: CGFloat = 1
        var buttonSelectedGreenComponent: CGFloat = 1
        var buttonSelectedBlueComponent: CGFloat = 1
        buttonSelected.getRed(&buttonSelectedRedComponent, green: &buttonSelectedGreenComponent, blue: &buttonSelectedBlueComponent, alpha: nil)

        let buttonStrokeSelected = UIColor(red: (buttonSelectedRedComponent * 0.7), green: (buttonSelectedGreenComponent * 0.7), blue: (buttonSelectedBlueComponent * 0.7), alpha: (buttonSelected.cgColor.alpha * 0.7 + 0.3))
        let buttonNormal = UIColor(red: 0.496, green: 0.859, blue: 0.612, alpha: 1.000)
        var buttonNormalRedComponent: CGFloat = 1
        var buttonNormalGreenComponent: CGFloat = 1
        var buttonNormalBlueComponent: CGFloat = 1
        buttonNormal.getRed(&buttonNormalRedComponent, green: &buttonNormalGreenComponent, blue: &buttonNormalBlueComponent, alpha: nil)

        let buttonStrokeNormal = UIColor(red: (buttonNormalRedComponent * 0.8), green: (buttonNormalGreenComponent * 0.8), blue: (buttonNormalBlueComponent * 0.8), alpha: (buttonNormal.cgColor.alpha * 0.8 + 0.2))

        //// Variable Declarations
        let buttonFill = selected ? buttonSelected : buttonNormal
        let buttonStroke = selected ? buttonStrokeSelected : buttonStrokeNormal

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 1, y: 1, width: 119, height: 29), cornerRadius: 5)
        buttonFill.setFill()
        rectanglePath.fill()
        buttonStroke.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        if (highlighted) {
            //// Group 2
            context.saveGState()
            context.setBlendMode(.colorBurn)
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 1, y: 1, width: 119, height: 29), cornerRadius: 5)
            UIColor.lightGray.setFill()
            rectangle2Path.fill()
            UIColor.lightGray.setStroke()
            rectangle2Path.lineWidth = 2
            rectangle2Path.stroke()


            context.endTransparencyLayer()
            context.restoreGState()
        }
    }

    public dynamic class func drawBag(bagColor: UIColor = UIColor(red: 0.040, green: 0.540, blue: 0.221, alpha: 1.000)) {
        //// Color Declarations
        var bagColorRedComponent: CGFloat = 1
        var bagColorGreenComponent: CGFloat = 1
        var bagColorBlueComponent: CGFloat = 1
        bagColor.getRed(&bagColorRedComponent, green: &bagColorGreenComponent, blue: &bagColorBlueComponent, alpha: nil)

        let heartColor = UIColor(red: (bagColorRedComponent * 0.5 + 0.5), green: (bagColorGreenComponent * 0.5 + 0.5), blue: (bagColorBlueComponent * 0.5 + 0.5), alpha: (bagColor.cgColor.alpha * 0.5 + 0.5))

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 45.71, y: 17.11))
        ovalPath.addCurve(to: CGPoint(x: 42.05, y: 8.19), controlPoint1: CGPoint(x: 46.13, y: 13.93), controlPoint2: CGPoint(x: 44.91, y: 10.62))
        ovalPath.addCurve(to: CGPoint(x: 23.95, y: 8.19), controlPoint1: CGPoint(x: 37.05, y: 3.94), controlPoint2: CGPoint(x: 28.95, y: 3.94))
        ovalPath.addCurve(to: CGPoint(x: 20.46, y: 18.03), controlPoint1: CGPoint(x: 20.81, y: 10.86), controlPoint2: CGPoint(x: 19.64, y: 14.58))
        bagColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 59.5, y: 58.5))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 58.5))
        bezierPath.addLine(to: CGPoint(x: 10.16, y: 16.79))
        bezierPath.addLine(to: CGPoint(x: 55.84, y: 16.79))
        bezierPath.addLine(to: CGPoint(x: 59.5, y: 58.5))
        bezierPath.close()
        bagColor.setFill()
        bezierPath.fill()
        bagColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()




        //// Group 2
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 40.29, y: 22.53))
        bezier2Path.addCurve(to: CGPoint(x: 35.8, y: 24.11), controlPoint1: CGPoint(x: 38.6, y: 22.53), controlPoint2: CGPoint(x: 37.1, y: 23.06))
        bezier2Path.addCurve(to: CGPoint(x: 33.03, y: 28.7), controlPoint1: CGPoint(x: 34.5, y: 25.16), controlPoint2: CGPoint(x: 33.57, y: 26.69))
        bezier2Path.addCurve(to: CGPoint(x: 25.79, y: 22.53), controlPoint1: CGPoint(x: 31.66, y: 24.59), controlPoint2: CGPoint(x: 29.24, y: 22.53))
        bezier2Path.addCurve(to: CGPoint(x: 21.19, y: 24.39), controlPoint1: CGPoint(x: 23.97, y: 22.53), controlPoint2: CGPoint(x: 22.44, y: 23.15))
        bezier2Path.addCurve(to: CGPoint(x: 19.32, y: 28.95), controlPoint1: CGPoint(x: 19.94, y: 25.62), controlPoint2: CGPoint(x: 19.32, y: 27.14))
        bezier2Path.addCurve(to: CGPoint(x: 19.91, y: 32.08), controlPoint1: CGPoint(x: 19.32, y: 30.01), controlPoint2: CGPoint(x: 19.51, y: 31.05))
        bezier2Path.addCurve(to: CGPoint(x: 20.27, y: 32.88), controlPoint1: CGPoint(x: 20.02, y: 32.35), controlPoint2: CGPoint(x: 20.13, y: 32.61))
        bezier2Path.addCurve(to: CGPoint(x: 23.2, y: 37.28), controlPoint1: CGPoint(x: 20.72, y: 33.81), controlPoint2: CGPoint(x: 21.7, y: 35.28))
        bezier2Path.addCurve(to: CGPoint(x: 25.12, y: 39.77), controlPoint1: CGPoint(x: 23.76, y: 38.03), controlPoint2: CGPoint(x: 24.4, y: 38.86))
        bezier2Path.addCurve(to: CGPoint(x: 30.69, y: 47.56), controlPoint1: CGPoint(x: 27.72, y: 43.08), controlPoint2: CGPoint(x: 29.58, y: 45.67))
        bezier2Path.addCurve(to: CGPoint(x: 33.03, y: 53.25), controlPoint1: CGPoint(x: 31.8, y: 49.45), controlPoint2: CGPoint(x: 32.58, y: 51.34))
        bezier2Path.addCurve(to: CGPoint(x: 41.29, y: 39.52), controlPoint1: CGPoint(x: 33.85, y: 49.87), controlPoint2: CGPoint(x: 36.6, y: 45.3))
        bezier2Path.addCurve(to: CGPoint(x: 45.38, y: 33.58), controlPoint1: CGPoint(x: 43.14, y: 37.28), controlPoint2: CGPoint(x: 44.5, y: 35.3))
        bezier2Path.addCurve(to: CGPoint(x: 46.68, y: 28.6), controlPoint1: CGPoint(x: 46.25, y: 31.86), controlPoint2: CGPoint(x: 46.68, y: 30.2))
        bezier2Path.addCurve(to: CGPoint(x: 44.76, y: 24.36), controlPoint1: CGPoint(x: 46.68, y: 26.99), controlPoint2: CGPoint(x: 46.04, y: 25.58))
        bezier2Path.addCurve(to: CGPoint(x: 40.29, y: 22.53), controlPoint1: CGPoint(x: 43.48, y: 23.14), controlPoint2: CGPoint(x: 41.99, y: 22.53))
        bezier2Path.close()
        heartColor.setFill()
        bezier2Path.fill()
        bagColor.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()
    }

    public dynamic class func drawLiveButton(liveButtonColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.030, alpha: 1.000), radius: CGFloat = 30, strokeWidth: CGFloat = 17) {
        //// Color Declarations
        var liveButtonColorRedComponent: CGFloat = 1
        var liveButtonColorGreenComponent: CGFloat = 1
        var liveButtonColorBlueComponent: CGFloat = 1
        liveButtonColor.getRed(&liveButtonColorRedComponent, green: &liveButtonColorGreenComponent, blue: &liveButtonColorBlueComponent, alpha: nil)

        let liveButtonColorDark = UIColor(red: (liveButtonColorRedComponent * 0.5), green: (liveButtonColorGreenComponent * 0.5), blue: (liveButtonColorBlueComponent * 0.5), alpha: (liveButtonColor.cgColor.alpha * 0.5 + 0.5))

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 10.5, y: 10.5, width: 80, height: 80), cornerRadius: radius)
        liveButtonColor.setFill()
        rectanglePath.fill()
        liveButtonColorDark.setStroke()
        rectanglePath.lineWidth = strokeWidth
        rectanglePath.stroke()
    }

    public dynamic class func drawClock(watchColor: UIColor = UIColor(red: 1.000, green: 0.745, blue: 0.020, alpha: 1.000), hrs: CGFloat = 24, mins: CGFloat = 22, secs: CGFloat = 15) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Shadow Declarations
        let handShadow = NSShadow()
        handShadow.shadowColor = UIColor.black
        handShadow.shadowOffset = CGSize(width: 0, height: 0)
        handShadow.shadowBlurRadius = 1

        //// Variable Declarations
        let hrsAngle: CGFloat = -360 * (fmod(hrs, 12)) / 12.0
        let minsAngle: CGFloat = -360 * (fmod(mins, 60)) / 60.0
        let secsVal: CGFloat = 199 * secs / 60.0
        let secsAngle: CGFloat = -360 * secs / 60.0

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 9.5, y: 8.5, width: 79, height: 79), cornerRadius: 13)
        UIColor.black.setFill()
        rectangle2Path.fill()
        UIColor.black.setStroke()
        rectangle2Path.lineWidth = 4.5
        rectangle2Path.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 9.5, y: 8.5, width: 79, height: 79), cornerRadius: 13)
        UIColor.black.setFill()
        rectanglePath.fill()
        watchColor.setStroke()
        rectanglePath.lineWidth = 4
        rectanglePath.stroke()


        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 49, y: 48)
        context.rotate(by: -90 * CGFloat.pi/180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -31.5, y: -31.5, width: 63, height: 63))
        watchColor.setStroke()
        oval2Path.lineWidth = 2
        context.saveGState()
        context.setLineDash(phase: 1, lengths: [secsVal, 199])
        oval2Path.stroke()
        context.restoreGState()

        context.restoreGState()


        //// handHrs
        context.saveGState()
        context.translateBy(x: 49, y: 48)
        context.rotate(by: -hrsAngle * CGFloat.pi/180)



        //// Bezier Drawing
        context.saveGState()

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -0, y: 0))
        bezierPath.addLine(to: CGPoint(x: -0, y: -24))
        UIColor.black.setFill()
        bezierPath.fill()
        UIColor.white.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()

        context.restoreGState()



        context.restoreGState()


        //// handMins
        context.saveGState()
        context.translateBy(x: 49, y: 48)
        context.rotate(by: -minsAngle * CGFloat.pi/180)

        context.setShadow(offset: handShadow.shadowOffset, blur: handShadow.shadowBlurRadius, color: (handShadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 2 Drawing
        context.saveGState()

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: -0, y: -26))
        context.saveGState()
        context.setShadow(offset: handShadow.shadowOffset, blur: handShadow.shadowBlurRadius, color: (handShadow.shadowColor as! UIColor).cgColor)
        UIColor.black.setFill()
        bezier2Path.fill()
        context.restoreGState()

        UIColor.white.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 46.5, y: 45.5, width: 5, height: 5))
        UIColor.black.setFill()
        ovalPath.fill()
        UIColor.white.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Oval 3 Drawing
        context.saveGState()
        context.translateBy(x: 49, y: 48)
        context.rotate(by: -secsAngle * CGFloat.pi/180)

        let oval3Path = UIBezierPath(ovalIn: CGRect(x: -2.5, y: -34, width: 5, height: 5))
        UIColor.black.setFill()
        oval3Path.fill()
        watchColor.setStroke()
        oval3Path.lineWidth = 1
        oval3Path.stroke()

        context.restoreGState()
    }

    public dynamic class func drawAperture(apertureValue: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let color4 = UIColor(red: 0.123, green: 0.468, blue: 0.720, alpha: 1.000)

        //// Variable Declarations
        let angle: CGFloat = 90 * apertureValue / 3.0

        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip mask
        let maskPath = UIBezierPath(ovalIn: CGRect(x: 12, y: 12, width: 156, height: 156))
        maskPath.addClip()


        //// o 8 Drawing
        context.saveGState()
        context.translateBy(x: 146.58, y: 33.43)
        context.rotate(by: -angle * CGFloat.pi/180)

        let o8Rect = CGRect(x: -136.58, y: -23.43, width: 160, height: 160)
        let o8Path = UIBezierPath()
        o8Path.addArc(withCenter: CGPoint(x: o8Rect.midX, y: o8Rect.midY), radius: o8Rect.width / 2, startAngle: 315 * CGFloat.pi/180, endAngle: 0 * CGFloat.pi/180, clockwise: true)
        o8Path.addLine(to: CGPoint(x: o8Rect.midX, y: o8Rect.midY))
        o8Path.close()

        color4.setFill()
        o8Path.fill()
        UIColor.white.setStroke()
        o8Path.lineWidth = 3
        o8Path.stroke()

        context.restoreGState()


        //// o 6 Drawing
        context.saveGState()
        context.translateBy(x: 90, y: 10)
        context.rotate(by: -angle * CGFloat.pi/180)

        let o6Rect = CGRect(x: -80, y: 0, width: 160, height: 160)
        let o6Path = UIBezierPath()
        o6Path.addArc(withCenter: CGPoint(x: o6Rect.midX, y: o6Rect.midY), radius: o6Rect.width / 2, startAngle: -90 * CGFloat.pi/180, endAngle: -45 * CGFloat.pi/180, clockwise: true)
        o6Path.addLine(to: CGPoint(x: o6Rect.midX, y: o6Rect.midY))
        o6Path.close()

        color4.setFill()
        o6Path.fill()
        UIColor.white.setStroke()
        o6Path.lineWidth = 3
        o6Path.stroke()

        context.restoreGState()


        //// o 5 Drawing
        context.saveGState()
        context.translateBy(x: 33.44, y: 33.43)
        context.rotate(by: -angle * CGFloat.pi/180)

        let o5Rect = CGRect(x: -23.44, y: -23.43, width: 160, height: 160)
        let o5Path = UIBezierPath()
        o5Path.addArc(withCenter: CGPoint(x: o5Rect.midX, y: o5Rect.midY), radius: o5Rect.width / 2, startAngle: -135 * CGFloat.pi/180, endAngle: -90 * CGFloat.pi/180, clockwise: true)
        o5Path.addLine(to: CGPoint(x: o5Rect.midX, y: o5Rect.midY))
        o5Path.close()

        color4.setFill()
        o5Path.fill()
        UIColor.white.setStroke()
        o5Path.lineWidth = 3
        o5Path.stroke()

        context.restoreGState()


        //// o 4 Drawing
        context.saveGState()
        context.translateBy(x: 10, y: 90)
        context.rotate(by: -angle * CGFloat.pi/180)

        let o4Rect = CGRect(x: 0, y: -80, width: 160, height: 160)
        let o4Path = UIBezierPath()
        o4Path.addArc(withCenter: CGPoint(x: o4Rect.midX, y: o4Rect.midY), radius: o4Rect.width / 2, startAngle: -180 * CGFloat.pi/180, endAngle: -135 * CGFloat.pi/180, clockwise: true)
        o4Path.addLine(to: CGPoint(x: o4Rect.midX, y: o4Rect.midY))
        o4Path.close()

        color4.setFill()
        o4Path.fill()
        UIColor.white.setStroke()
        o4Path.lineWidth = 3
        o4Path.stroke()

        context.restoreGState()


        //// o 3 Drawing
        context.saveGState()
        context.translateBy(x: 33.4, y: 146.56)
        context.rotate(by: -angle * CGFloat.pi/180)

        let o3Rect = CGRect(x: -23.4, y: -136.56, width: 160, height: 160)
        let o3Path = UIBezierPath()
        o3Path.addArc(withCenter: CGPoint(x: o3Rect.midX, y: o3Rect.midY), radius: o3Rect.width / 2, startAngle: 135 * CGFloat.pi/180, endAngle: -180 * CGFloat.pi/180, clockwise: true)
        o3Path.addLine(to: CGPoint(x: o3Rect.midX, y: o3Rect.midY))
        o3Path.close()

        color4.setFill()
        o3Path.fill()
        UIColor.white.setStroke()
        o3Path.lineWidth = 3
        o3Path.stroke()

        context.restoreGState()


        //// o 2 Drawing
        context.saveGState()
        context.translateBy(x: 90, y: 170)
        context.rotate(by: -angle * CGFloat.pi/180)

        let o2Rect = CGRect(x: -80, y: -160, width: 160, height: 160)
        let o2Path = UIBezierPath()
        o2Path.addArc(withCenter: CGPoint(x: o2Rect.midX, y: o2Rect.midY), radius: o2Rect.width / 2, startAngle: -270 * CGFloat.pi/180, endAngle: -225 * CGFloat.pi/180, clockwise: true)
        o2Path.addLine(to: CGPoint(x: o2Rect.midX, y: o2Rect.midY))
        o2Path.close()

        color4.setFill()
        o2Path.fill()
        UIColor.white.setStroke()
        o2Path.lineWidth = 3
        o2Path.stroke()

        context.restoreGState()


        //// o1 Drawing
        context.saveGState()
        context.translateBy(x: 146.54, y: 146.6)
        context.rotate(by: -angle * CGFloat.pi/180)

        let o1Rect = CGRect(x: -136.54, y: -136.6, width: 160, height: 160)
        let o1Path = UIBezierPath()
        o1Path.addArc(withCenter: CGPoint(x: o1Rect.midX, y: o1Rect.midY), radius: o1Rect.width / 2, startAngle: 45 * CGFloat.pi/180, endAngle: 90 * CGFloat.pi/180, clockwise: true)
        o1Path.addLine(to: CGPoint(x: o1Rect.midX, y: o1Rect.midY))
        o1Path.close()

        color4.setFill()
        o1Path.fill()
        UIColor.white.setStroke()
        o1Path.lineWidth = 3
        o1Path.stroke()

        context.restoreGState()


        //// o0 Drawing
        context.saveGState()
        context.translateBy(x: 170, y: 90)
        context.rotate(by: -angle * CGFloat.pi/180)

        let o0Rect = CGRect(x: -160, y: -80, width: 160, height: 160)
        let o0Path = UIBezierPath()
        o0Path.addArc(withCenter: CGPoint(x: o0Rect.midX, y: o0Rect.midY), radius: o0Rect.width / 2, startAngle: 360 * CGFloat.pi/180, endAngle: 45 * CGFloat.pi/180, clockwise: true)
        o0Path.addLine(to: CGPoint(x: o0Rect.midX, y: o0Rect.midY))
        o0Path.close()

        color4.setFill()
        o0Path.fill()
        UIColor.white.setStroke()
        o0Path.lineWidth = 3
        o0Path.stroke()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
    }

    public dynamic class func drawProjectIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let color3 = UIColor(red: 0.039, green: 0.498, blue: 0.980, alpha: 1.000)
        let color5 = UIColor(red: 0.345, green: 0.776, blue: 0.980, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [color5.cgColor, color3.cgColor] as CFArray, locations: [0, 1])!

        //// Group
        context.saveGState()
        context.translateBy(x: 10.27, y: 27.15)
        context.scaleBy(x: 0.5, y: 0.5)



        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 66.07)
        context.rotate(by: -9 * CGFloat.pi/180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 422.35, height: 339.43))
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 211.17, y: 0), end: CGPoint(x: 211.17, y: 339.43), options: [])
        context.restoreGState()

        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 21.24, y: 79.18))
        bezierPath.addLine(to: CGPoint(x: 402.24, y: 19.18))
        bezierPath.addLine(to: CGPoint(x: 452.24, y: 321.18))
        bezierPath.addLine(to: CGPoint(x: 67.24, y: 383.18))
        bezierPath.addLine(to: CGPoint(x: 21.24, y: 79.18))
        bezierPath.close()
        UIColor.white.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()


        //// Bezier 18 Drawing
        let bezier18Path = UIBezierPath()
        bezier18Path.move(to: CGPoint(x: 232.51, y: 67.22))
        bezier18Path.addCurve(to: CGPoint(x: 228.01, y: 62.72), controlPoint1: CGPoint(x: 232.51, y: 64.74), controlPoint2: CGPoint(x: 230.49, y: 62.72))
        bezier18Path.addCurve(to: CGPoint(x: 223.51, y: 67.22), controlPoint1: CGPoint(x: 225.52, y: 62.72), controlPoint2: CGPoint(x: 223.51, y: 64.74))
        bezier18Path.addCurve(to: CGPoint(x: 228.01, y: 71.72), controlPoint1: CGPoint(x: 223.51, y: 69.71), controlPoint2: CGPoint(x: 225.52, y: 71.72))
        bezier18Path.addCurve(to: CGPoint(x: 232.51, y: 67.22), controlPoint1: CGPoint(x: 230.49, y: 71.72), controlPoint2: CGPoint(x: 232.51, y: 69.71))
        bezier18Path.close()
        bezier18Path.move(to: CGPoint(x: 208.52, y: 85.32))
        bezier18Path.addCurve(to: CGPoint(x: 204.02, y: 80.82), controlPoint1: CGPoint(x: 208.52, y: 82.84), controlPoint2: CGPoint(x: 206.5, y: 80.82))
        bezier18Path.addCurve(to: CGPoint(x: 199.52, y: 85.32), controlPoint1: CGPoint(x: 201.53, y: 80.82), controlPoint2: CGPoint(x: 199.52, y: 82.84))
        bezier18Path.addCurve(to: CGPoint(x: 204.02, y: 89.82), controlPoint1: CGPoint(x: 199.52, y: 87.81), controlPoint2: CGPoint(x: 201.53, y: 89.82))
        bezier18Path.addCurve(to: CGPoint(x: 208.52, y: 85.32), controlPoint1: CGPoint(x: 206.5, y: 89.82), controlPoint2: CGPoint(x: 208.52, y: 87.81))
        bezier18Path.close()
        bezier18Path.move(to: CGPoint(x: 215.94, y: 63.26))
        bezier18Path.addCurve(to: CGPoint(x: 211.44, y: 67.76), controlPoint1: CGPoint(x: 215.94, y: 65.75), controlPoint2: CGPoint(x: 213.92, y: 67.76))
        bezier18Path.addCurve(to: CGPoint(x: 209.21, y: 67.17), controlPoint1: CGPoint(x: 210.63, y: 67.76), controlPoint2: CGPoint(x: 209.87, y: 67.55))
        bezier18Path.addCurve(to: CGPoint(x: 209.65, y: 69.12), controlPoint1: CGPoint(x: 209.5, y: 67.76), controlPoint2: CGPoint(x: 209.65, y: 68.42))
        bezier18Path.addCurve(to: CGPoint(x: 205.15, y: 73.62), controlPoint1: CGPoint(x: 209.65, y: 71.61), controlPoint2: CGPoint(x: 207.64, y: 73.62))
        bezier18Path.addCurve(to: CGPoint(x: 200.65, y: 69.12), controlPoint1: CGPoint(x: 202.67, y: 73.62), controlPoint2: CGPoint(x: 200.65, y: 71.61))
        bezier18Path.addCurve(to: CGPoint(x: 203.3, y: 65.02), controlPoint1: CGPoint(x: 200.65, y: 67.3), controlPoint2: CGPoint(x: 201.74, y: 65.73))
        bezier18Path.addCurve(to: CGPoint(x: 205.15, y: 64.62), controlPoint1: CGPoint(x: 203.87, y: 64.76), controlPoint2: CGPoint(x: 204.5, y: 64.62))
        bezier18Path.addCurve(to: CGPoint(x: 207.38, y: 65.21), controlPoint1: CGPoint(x: 205.96, y: 64.62), controlPoint2: CGPoint(x: 206.72, y: 64.84))
        bezier18Path.addCurve(to: CGPoint(x: 206.94, y: 63.26), controlPoint1: CGPoint(x: 207.1, y: 64.62), controlPoint2: CGPoint(x: 206.94, y: 63.96))
        bezier18Path.addCurve(to: CGPoint(x: 209.36, y: 59.27), controlPoint1: CGPoint(x: 206.94, y: 61.53), controlPoint2: CGPoint(x: 207.92, y: 60.02))
        bezier18Path.addCurve(to: CGPoint(x: 211.44, y: 58.76), controlPoint1: CGPoint(x: 209.98, y: 58.94), controlPoint2: CGPoint(x: 210.69, y: 58.76))
        bezier18Path.addCurve(to: CGPoint(x: 215.94, y: 63.26), controlPoint1: CGPoint(x: 213.92, y: 58.76), controlPoint2: CGPoint(x: 215.94, y: 60.77))
        bezier18Path.close()
        bezier18Path.move(to: CGPoint(x: 207.29, y: 109.65))
        bezier18Path.addCurve(to: CGPoint(x: 209.9, y: 108.04), controlPoint1: CGPoint(x: 207.93, y: 108.86), controlPoint2: CGPoint(x: 208.85, y: 108.27))
        bezier18Path.addCurve(to: CGPoint(x: 210.84, y: 107.95), controlPoint1: CGPoint(x: 210.2, y: 107.98), controlPoint2: CGPoint(x: 210.52, y: 107.95))
        bezier18Path.addCurve(to: CGPoint(x: 215.34, y: 112.45), controlPoint1: CGPoint(x: 213.32, y: 107.95), controlPoint2: CGPoint(x: 215.34, y: 109.96))
        bezier18Path.addCurve(to: CGPoint(x: 210.84, y: 116.95), controlPoint1: CGPoint(x: 215.34, y: 114.93), controlPoint2: CGPoint(x: 213.32, y: 116.95))
        bezier18Path.addCurve(to: CGPoint(x: 206.34, y: 112.45), controlPoint1: CGPoint(x: 208.35, y: 116.95), controlPoint2: CGPoint(x: 206.34, y: 114.93))
        bezier18Path.addCurve(to: CGPoint(x: 202.79, y: 114.15), controlPoint1: CGPoint(x: 205.51, y: 113.47), controlPoint2: CGPoint(x: 204.23, y: 114.15))
        bezier18Path.addCurve(to: CGPoint(x: 198.29, y: 109.65), controlPoint1: CGPoint(x: 200.3, y: 114.15), controlPoint2: CGPoint(x: 198.29, y: 112.13))
        bezier18Path.addCurve(to: CGPoint(x: 201.93, y: 105.23), controlPoint1: CGPoint(x: 198.29, y: 107.46), controlPoint2: CGPoint(x: 199.85, y: 105.63))
        bezier18Path.addCurve(to: CGPoint(x: 202.79, y: 105.15), controlPoint1: CGPoint(x: 202.21, y: 105.18), controlPoint2: CGPoint(x: 202.49, y: 105.15))
        bezier18Path.addCurve(to: CGPoint(x: 207.29, y: 109.65), controlPoint1: CGPoint(x: 205.27, y: 105.15), controlPoint2: CGPoint(x: 207.29, y: 107.16))
        bezier18Path.close()
        bezier18Path.move(to: CGPoint(x: 221.88, y: 128.7))
        bezier18Path.addCurve(to: CGPoint(x: 217.38, y: 124.2), controlPoint1: CGPoint(x: 221.88, y: 126.21), controlPoint2: CGPoint(x: 219.86, y: 124.2))
        bezier18Path.addCurve(to: CGPoint(x: 212.88, y: 128.7), controlPoint1: CGPoint(x: 214.89, y: 124.2), controlPoint2: CGPoint(x: 212.88, y: 126.21))
        bezier18Path.addCurve(to: CGPoint(x: 217.38, y: 133.2), controlPoint1: CGPoint(x: 212.88, y: 131.19), controlPoint2: CGPoint(x: 214.89, y: 133.2))
        bezier18Path.addCurve(to: CGPoint(x: 221.88, y: 128.7), controlPoint1: CGPoint(x: 219.86, y: 133.2), controlPoint2: CGPoint(x: 221.88, y: 131.19))
        bezier18Path.close()
        bezier18Path.move(to: CGPoint(x: 190.41, y: 117.74))
        bezier18Path.addCurve(to: CGPoint(x: 185.91, y: 113.24), controlPoint1: CGPoint(x: 190.41, y: 115.26), controlPoint2: CGPoint(x: 188.4, y: 113.24))
        bezier18Path.addCurve(to: CGPoint(x: 181.41, y: 117.74), controlPoint1: CGPoint(x: 183.43, y: 113.24), controlPoint2: CGPoint(x: 181.41, y: 115.26))
        bezier18Path.addCurve(to: CGPoint(x: 185.91, y: 122.24), controlPoint1: CGPoint(x: 181.41, y: 120.23), controlPoint2: CGPoint(x: 183.43, y: 122.24))
        bezier18Path.addCurve(to: CGPoint(x: 190.41, y: 117.74), controlPoint1: CGPoint(x: 188.4, y: 122.24), controlPoint2: CGPoint(x: 190.41, y: 120.23))
        bezier18Path.close()
        UIColor.white.setStroke()
        bezier18Path.lineWidth = 1
        bezier18Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 197.19, y: 107.85))
        bezier4Path.addCurve(to: CGPoint(x: 206.22, y: 110.64), controlPoint1: CGPoint(x: 199.79, y: 108.05), controlPoint2: CGPoint(x: 201.94, y: 108.91))
        bezier4Path.addLine(to: CGPoint(x: 206.84, y: 110.89))
        bezier4Path.addCurve(to: CGPoint(x: 214.94, y: 114.91), controlPoint1: CGPoint(x: 211.12, y: 112.62), controlPoint2: CGPoint(x: 213.26, y: 113.49))
        bezier4Path.addLine(to: CGPoint(x: 215.28, y: 115.15))
        bezier4Path.addCurve(to: CGPoint(x: 218.51, y: 122.76), controlPoint1: CGPoint(x: 217.42, y: 117.09), controlPoint2: CGPoint(x: 218.61, y: 119.87))
        bezier4Path.addCurve(to: CGPoint(x: 215.71, y: 131.79), controlPoint1: CGPoint(x: 218.3, y: 125.36), controlPoint2: CGPoint(x: 217.44, y: 127.5))
        bezier4Path.addLine(to: CGPoint(x: 209.59, y: 146.94))
        bezier4Path.addLine(to: CGPoint(x: 179.21, y: 134.66))
        bezier4Path.addLine(to: CGPoint(x: 185.33, y: 119.51))
        bezier4Path.addCurve(to: CGPoint(x: 189.34, y: 111.41), controlPoint1: CGPoint(x: 187.06, y: 115.23), controlPoint2: CGPoint(x: 187.92, y: 113.09))
        bezier4Path.addLine(to: CGPoint(x: 189.58, y: 111.07))
        bezier4Path.addCurve(to: CGPoint(x: 197.19, y: 107.85), controlPoint1: CGPoint(x: 191.52, y: 108.93), controlPoint2: CGPoint(x: 194.3, y: 107.74))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 387.73, y: 163.85))
        bezier4Path.addCurve(to: CGPoint(x: 392.73, y: 192.85), controlPoint1: CGPoint(x: 387.73, y: 163.85), controlPoint2: CGPoint(x: 392.73, y: 192.85))
        bezier4Path.addLine(to: CGPoint(x: 352.71, y: 199.2))
        bezier4Path.addLine(to: CGPoint(x: 330.05, y: 173.07))
        bezier4Path.addLine(to: CGPoint(x: 387.73, y: 163.85))
        bezier4Path.addLine(to: CGPoint(x: 387.73, y: 163.85))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 222.74, y: 62.1))
        bezier4Path.addCurve(to: CGPoint(x: 228.81, y: 68.12), controlPoint1: CGPoint(x: 224.74, y: 63.35), controlPoint2: CGPoint(x: 226.1, y: 64.94))
        bezier4Path.addLine(to: CGPoint(x: 330.72, y: 187.2))
        bezier4Path.addLine(to: CGPoint(x: 306.62, y: 207.84))
        bezier4Path.addCurve(to: CGPoint(x: 226.44, y: 112.48), controlPoint1: CGPoint(x: 306.62, y: 207.84), controlPoint2: CGPoint(x: 255.97, y: 147.59))
        bezier4Path.addCurve(to: CGPoint(x: 205.72, y: 87.84), controlPoint1: CGPoint(x: 214.29, y: 98.03), controlPoint2: CGPoint(x: 205.72, y: 87.84))
        bezier4Path.addCurve(to: CGPoint(x: 200.9, y: 81.23), controlPoint1: CGPoint(x: 203.01, y: 84.66), controlPoint2: CGPoint(x: 201.65, y: 83.07))
        bezier4Path.addLine(to: CGPoint(x: 200.73, y: 80.89))
        bezier4Path.addCurve(to: CGPoint(x: 201.32, y: 73.44), controlPoint1: CGPoint(x: 199.81, y: 78.44), controlPoint2: CGPoint(x: 200.03, y: 75.71))
        bezier4Path.addCurve(to: CGPoint(x: 207.34, y: 67.36), controlPoint1: CGPoint(x: 202.57, y: 71.44), controlPoint2: CGPoint(x: 204.16, y: 70.08))
        bezier4Path.addLine(to: CGPoint(x: 208.34, y: 66.51))
        bezier4Path.addCurve(to: CGPoint(x: 214.95, y: 61.68), controlPoint1: CGPoint(x: 211.52, y: 63.79), controlPoint2: CGPoint(x: 213.11, y: 62.43))
        bezier4Path.addLine(to: CGPoint(x: 215.28, y: 61.51))
        bezier4Path.addCurve(to: CGPoint(x: 222.74, y: 62.1), controlPoint1: CGPoint(x: 217.73, y: 60.6), controlPoint2: CGPoint(x: 220.46, y: 60.81))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 274.72, y: 181.88))
        bezier4Path.addCurve(to: CGPoint(x: 296.41, y: 208.01), controlPoint1: CGPoint(x: 274.71, y: 181.88), controlPoint2: CGPoint(x: 296.41, y: 208.01))
        bezier4Path.addLine(to: CGPoint(x: 185.73, y: 225.85))
        bezier4Path.addLine(to: CGPoint(x: 197.55, y: 193.82))
        bezier4Path.addLine(to: CGPoint(x: 274.71, y: 181.88))
        bezier4Path.addLine(to: CGPoint(x: 274.72, y: 181.88))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 334.72, y: 192.28))
        bezier4Path.addCurve(to: CGPoint(x: 355.65, y: 216.7), controlPoint1: CGPoint(x: 334.72, y: 192.28), controlPoint2: CGPoint(x: 355.65, y: 216.7))
        bezier4Path.addLine(to: CGPoint(x: 331.23, y: 237.35))
        bezier4Path.addLine(to: CGPoint(x: 310.83, y: 212.72))
        bezier4Path.addCurve(to: CGPoint(x: 312.55, y: 211.25), controlPoint1: CGPoint(x: 310.86, y: 212.69), controlPoint2: CGPoint(x: 312.55, y: 211.25))
        bezier4Path.addLine(to: CGPoint(x: 334.69, y: 192.31))
        bezier4Path.addLine(to: CGPoint(x: 334.72, y: 192.28))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 144.63, y: 202.2))
        bezier4Path.addCurve(to: CGPoint(x: 131.24, y: 235.02), controlPoint1: CGPoint(x: 144.63, y: 202.19), controlPoint2: CGPoint(x: 131.24, y: 235.02))
        bezier4Path.addLine(to: CGPoint(x: 89.33, y: 241.52))
        bezier4Path.addLine(to: CGPoint(x: 84.73, y: 211.85))
        bezier4Path.addLine(to: CGPoint(x: 144.63, y: 202.19))
        bezier4Path.addLine(to: CGPoint(x: 144.63, y: 202.2))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 176.86, y: 141.3))
        bezier4Path.addCurve(to: CGPoint(x: 206.84, y: 152.87), controlPoint1: CGPoint(x: 176.86, y: 141.3), controlPoint2: CGPoint(x: 206.84, y: 152.87))
        bezier4Path.addLine(to: CGPoint(x: 153.74, y: 282.38))
        bezier4Path.addLine(to: CGPoint(x: 123.61, y: 270.94))
        bezier4Path.addLine(to: CGPoint(x: 176.86, y: 141.3))
        bezier4Path.addLine(to: CGPoint(x: 176.86, y: 141.3))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 366.98, y: 226.98))
        bezier4Path.addCurve(to: CGPoint(x: 389.98, y: 265.7), controlPoint1: CGPoint(x: 371.69, y: 230.41), controlPoint2: CGPoint(x: 388.01, y: 243.17))
        bezier4Path.addCurve(to: CGPoint(x: 386.54, y: 292.36), controlPoint1: CGPoint(x: 391.95, y: 288.24), controlPoint2: CGPoint(x: 386.54, y: 292.36))
        bezier4Path.addCurve(to: CGPoint(x: 376.51, y: 279.06), controlPoint1: CGPoint(x: 386.54, y: 292.36), controlPoint2: CGPoint(x: 381.39, y: 282.97))
        bezier4Path.addCurve(to: CGPoint(x: 362.69, y: 271.52), controlPoint1: CGPoint(x: 371.63, y: 275.15), controlPoint2: CGPoint(x: 367.01, y: 273.07))
        bezier4Path.addCurve(to: CGPoint(x: 352.31, y: 266.05), controlPoint1: CGPoint(x: 358.36, y: 269.97), controlPoint2: CGPoint(x: 354.99, y: 267.61))
        bezier4Path.addCurve(to: CGPoint(x: 345.54, y: 259.79), controlPoint1: CGPoint(x: 349.62, y: 264.49), controlPoint2: CGPoint(x: 345.54, y: 259.79))
        bezier4Path.addCurve(to: CGPoint(x: 338.2, y: 247.95), controlPoint1: CGPoint(x: 345.54, y: 259.79), controlPoint2: CGPoint(x: 339.66, y: 251.05))
        bezier4Path.addCurve(to: CGPoint(x: 341.52, y: 237.95), controlPoint1: CGPoint(x: 336.75, y: 244.86), controlPoint2: CGPoint(x: 337.64, y: 241.06))
        bezier4Path.addCurve(to: CGPoint(x: 354.16, y: 227.41), controlPoint1: CGPoint(x: 345.39, y: 234.84), controlPoint2: CGPoint(x: 351.53, y: 229.89))
        bezier4Path.addCurve(to: CGPoint(x: 366.98, y: 226.98), controlPoint1: CGPoint(x: 356.79, y: 224.94), controlPoint2: CGPoint(x: 362.27, y: 223.54))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 120.66, y: 278.26))
        bezier4Path.addCurve(to: CGPoint(x: 150.73, y: 289.85), controlPoint1: CGPoint(x: 120.66, y: 278.26), controlPoint2: CGPoint(x: 150.73, y: 289.85))
        bezier4Path.addLine(to: CGPoint(x: 114.73, y: 335.85))
        bezier4Path.addLine(to: CGPoint(x: 120.66, y: 278.26))
        bezier4Path.addLine(to: CGPoint(x: 120.66, y: 278.26))
        bezier4Path.close()
        UIColor.white.setStroke()
        bezier4Path.lineWidth = 3
        bezier4Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 180.41, y: 131.68))
        bezier3Path.addLine(to: CGPoint(x: 104.27, y: 317.4))
        bezier3Path.move(to: CGPoint(x: 209.57, y: 146.15))
        bezier3Path.addLine(to: CGPoint(x: 135.27, y: 327.52))
        bezier3Path.move(to: CGPoint(x: 147.59, y: 195.16))
        bezier3Path.addLine(to: CGPoint(x: 129.14, y: 240.19))
        bezier3Path.move(to: CGPoint(x: 83.23, y: 204.35))
        bezier3Path.addLine(to: CGPoint(x: 90.67, y: 248.99))
        bezier3Path.move(to: CGPoint(x: 121.89, y: 262.99))
        bezier3Path.addLine(to: CGPoint(x: 114.17, y: 343.21))
        bezier3Path.move(to: CGPoint(x: 160.52, y: 277.69))
        bezier3Path.addLine(to: CGPoint(x: 110.02, y: 341.6))
        bezier3Path.move(to: CGPoint(x: 116.23, y: 276.35))
        bezier3Path.addLine(to: CGPoint(x: 157.83, y: 292.47))
        bezier3Path.move(to: CGPoint(x: 116.23, y: 268.35))
        bezier3Path.addLine(to: CGPoint(x: 163.24, y: 285.9))
        bezier3Path.move(to: CGPoint(x: 336.65, y: 243.51))
        bezier3Path.addLine(to: CGPoint(x: 187.41, y: 65.57))
        bezier3Path.move(to: CGPoint(x: 408.93, y: 279.47))
        bezier3Path.addLine(to: CGPoint(x: 215.39, y: 51.93))
        bezier3Path.move(to: CGPoint(x: 210.43, y: 74.73))
        bezier3Path.addLine(to: CGPoint(x: 200.07, y: 62.68))
        bezier3Path.move(to: CGPoint(x: 216.43, y: 68.73))
        bezier3Path.addLine(to: CGPoint(x: 206.84, y: 57.38))
        bezier3Path.move(to: CGPoint(x: 207.23, y: 77.35))
        bezier3Path.addLine(to: CGPoint(x: 190.72, y: 74.74))
        bezier3Path.move(to: CGPoint(x: 220.23, y: 67.35))
        bezier3Path.addCurve(to: CGPoint(x: 223.08, y: 53.09), controlPoint1: CGPoint(x: 221.23, y: 64.35), controlPoint2: CGPoint(x: 223.08, y: 53.09))
        bezier3Path.move(to: CGPoint(x: 223.23, y: 70.35))
        bezier3Path.addLine(to: CGPoint(x: 234.92, y: 61.61))
        bezier3Path.move(to: CGPoint(x: 211.23, y: 79.35))
        bezier3Path.addLine(to: CGPoint(x: 198.88, y: 89.19))
        bezier3Path.move(to: CGPoint(x: 178.23, y: 115.35))
        bezier3Path.addLine(to: CGPoint(x: 192.99, y: 120.83))
        bezier3Path.move(to: CGPoint(x: 208.23, y: 125.35))
        bezier3Path.addLine(to: CGPoint(x: 225.03, y: 132.1))
        bezier3Path.move(to: CGPoint(x: 196.23, y: 117.35))
        bezier3Path.addLine(to: CGPoint(x: 187.81, y: 101.24))
        bezier3Path.move(to: CGPoint(x: 200.23, y: 116.35))
        bezier3Path.addLine(to: CGPoint(x: 205.92, y: 102.44))
        bezier3Path.move(to: CGPoint(x: 207.23, y: 119.35))
        bezier3Path.addCurve(to: CGPoint(x: 212.82, y: 107.13), controlPoint1: CGPoint(x: 210.23, y: 114.35), controlPoint2: CGPoint(x: 212.82, y: 107.13))
        bezier3Path.move(to: CGPoint(x: 211.23, y: 121.35))
        bezier3Path.addLine(to: CGPoint(x: 226.13, y: 116.38))
        bezier3Path.move(to: CGPoint(x: 173.23, y: 132.35))
        bezier3Path.addLine(to: CGPoint(x: 216.06, y: 149.56))
        bezier3Path.move(to: CGPoint(x: 170.13, y: 138.47))
        bezier3Path.addLine(to: CGPoint(x: 211.7, y: 154.87))
        bezier3Path.move(to: CGPoint(x: 408.64, y: 190.15))
        bezier3Path.addLine(to: CGPoint(x: 79.33, y: 243.27))
        bezier3Path.move(to: CGPoint(x: 74.03, y: 213.21))
        bezier3Path.addCurve(to: CGPoint(x: 406.9, y: 160.91), controlPoint1: CGPoint(x: 84.03, y: 212.21), controlPoint2: CGPoint(x: 406.9, y: 160.91))
        bezier3Path.move(to: CGPoint(x: 202.23, y: 181.35))
        bezier3Path.addLine(to: CGPoint(x: 180.68, y: 239.12))
        bezier3Path.move(to: CGPoint(x: 366.91, y: 216.79))
        bezier3Path.addLine(to: CGPoint(x: 331.06, y: 246.71))
        bezier3Path.move(to: CGPoint(x: 366.2, y: 207.68))
        bezier3Path.addLine(to: CGPoint(x: 326.21, y: 241.56))
        bezier3Path.move(to: CGPoint(x: 386.23, y: 153.35))
        bezier3Path.addLine(to: CGPoint(x: 394.46, y: 202.52))
        bezier3Path.move(to: CGPoint(x: 266.23, y: 171.35))
        bezier3Path.addLine(to: CGPoint(x: 304.86, y: 218.47))
        bezier3Path.move(to: CGPoint(x: 324.44, y: 166.69))
        bezier3Path.addLine(to: CGPoint(x: 358.2, y: 205.62))
        bezier3Path.move(to: CGPoint(x: 335.5, y: 182.7))
        bezier3Path.addLine(to: CGPoint(x: 302.01, y: 211.68))
        bezier3Path.move(to: CGPoint(x: 340.04, y: 187.6))
        bezier3Path.addLine(to: CGPoint(x: 301.01, y: 220.68))
        bezier3Path.move(to: CGPoint(x: 77.23, y: 381.35))
        bezier3Path.addLine(to: CGPoint(x: 60.76, y: 384.79))
        bezier3Path.move(to: CGPoint(x: 22.23, y: 83.35))
        bezier3Path.addLine(to: CGPoint(x: 20.41, y: 71.48))
        bezier3Path.move(to: CGPoint(x: 30.23, y: 78.35))
        bezier3Path.addLine(to: CGPoint(x: 13.54, y: 80.83))
        bezier3Path.move(to: CGPoint(x: 402.23, y: 20.35))
        bezier3Path.addLine(to: CGPoint(x: 400.87, y: 11.64))
        bezier3Path.move(to: CGPoint(x: 395.23, y: 20.35))
        bezier3Path.addLine(to: CGPoint(x: 409.48, y: 18.48))
        bezier3Path.move(to: CGPoint(x: 447.23, y: 322.35))
        bezier3Path.addLine(to: CGPoint(x: 460.33, y: 320.77))
        bezier3Path.move(to: CGPoint(x: 452.23, y: 319.35))
        bezier3Path.addCurve(to: CGPoint(x: 453.14, y: 330.52), controlPoint1: CGPoint(x: 452.23, y: 319.35), controlPoint2: CGPoint(x: 453.14, y: 330.69))
        bezier3Path.move(to: CGPoint(x: 217.23, y: 128.35))
        bezier3Path.addLine(to: CGPoint(x: 223.92, y: 111.53))
        bezier3Path.move(to: CGPoint(x: 187.47, y: 114.95))
        bezier3Path.addLine(to: CGPoint(x: 195, y: 98.11))
        bezier3Path.move(to: CGPoint(x: 61.73, y: 353.85))
        bezier3Path.addLine(to: CGPoint(x: 446.73, y: 291.85))
        bezier3Path.move(to: CGPoint(x: 68.23, y: 382.35))
        bezier3Path.addLine(to: CGPoint(x: 68.11, y: 391.46))
        UIColor.white.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 307.78, y: 206.94))
        bezier2Path.addLine(to: CGPoint(x: 312.24, y: 212.1))
        UIColor.white.setStroke()
        bezier2Path.lineWidth = 3
        bezier2Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 330.06, y: 188.42))
        bezier5Path.addLine(to: CGPoint(x: 334.52, y: 193.59))
        UIColor.white.setStroke()
        bezier5Path.lineWidth = 3
        bezier5Path.stroke()



        context.restoreGState()
    }

    //// Generated Images

    public dynamic class var imageOfBlueRect: UIImage {
        if Cache.imageOfBlueRect != nil {
            return Cache.imageOfBlueRect!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 65, height: 65), false, 0)
            StyleKit.drawBlueRect()

        Cache.imageOfBlueRect = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfBlueRect!
    }

    public dynamic class func imageOfBlueRectFramed(imageSize: CGSize = CGSize(width: 65, height: 65)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            StyleKit.drawBlueRectFramed(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height))

        let imageOfBlueRectFramed = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfBlueRectFramed
    }

    public dynamic class var imageOfStore: UIImage {
        if Cache.imageOfStore != nil {
            return Cache.imageOfStore!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            StyleKit.drawStore()

        Cache.imageOfStore = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile).withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfStore!
    }

    public dynamic class var imageOfSoup: UIImage {
        if Cache.imageOfSoup != nil {
            return Cache.imageOfSoup!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            StyleKit.drawSoup()

        Cache.imageOfSoup = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile).withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfSoup!
    }

    public dynamic class var imageOfTabBarBackground: UIImage {
        if Cache.imageOfTabBarBackground != nil {
            return Cache.imageOfTabBarBackground!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            StyleKit.drawTabBarBackground()

        Cache.imageOfTabBarBackground = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfTabBarBackground!
    }

    public dynamic class var imageOfSelectionIndicator: UIImage {
        if Cache.imageOfSelectionIndicator != nil {
            return Cache.imageOfSelectionIndicator!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            StyleKit.drawSelectionIndicator()

        Cache.imageOfSelectionIndicator = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets(top: 4, left: 4, bottom: 4, right: 4), resizingMode: .stretch)
        UIGraphicsEndImageContext()

        return Cache.imageOfSelectionIndicator!
    }

    public dynamic class var imageOfShadowImage: UIImage {
        if Cache.imageOfShadowImage != nil {
            return Cache.imageOfShadowImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 8), false, 0)
            StyleKit.drawShadowImage()

        Cache.imageOfShadowImage = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets(top: 0, left: 3, bottom: 0, right: 1), resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfShadowImage!
    }

    public dynamic class func imageOfButton(selected: Bool = false, highlighted: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 121, height: 31), false, 0)
            StyleKit.drawButton(selected: selected, highlighted: highlighted)

        let imageOfButton = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets(top: 6, left: 6, bottom: 6, right: 6), resizingMode: .stretch).withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return imageOfButton
    }

    public dynamic class func imageOfBag(bagColor: UIColor = UIColor(red: 0.040, green: 0.540, blue: 0.221, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 65, height: 65), false, 0)
            StyleKit.drawBag(bagColor: bagColor)

        let imageOfBag = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfBag
    }

    public dynamic class var imageOfProjectIcon: UIImage {
        if Cache.imageOfProjectIcon != nil {
            return Cache.imageOfProjectIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 256, height: 256), false, 0)
            StyleKit.drawProjectIcon()

        Cache.imageOfProjectIcon = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile).withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfProjectIcon!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var blueRectTargets: [AnyObject]! {
        get { return Cache.blueRectTargets }
        set {
            Cache.blueRectTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfBlueRect)
            }
        }
    }

    @IBOutlet dynamic var storeTargets: [AnyObject]! {
        get { return Cache.storeTargets }
        set {
            Cache.storeTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfStore)
            }
        }
    }

    @IBOutlet dynamic var soupTargets: [AnyObject]! {
        get { return Cache.soupTargets }
        set {
            Cache.soupTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfSoup)
            }
        }
    }

    @IBOutlet dynamic var tabBarBackgroundTargets: [AnyObject]! {
        get { return Cache.tabBarBackgroundTargets }
        set {
            Cache.tabBarBackgroundTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfTabBarBackground)
            }
        }
    }

    @IBOutlet dynamic var selectionIndicatorTargets: [AnyObject]! {
        get { return Cache.selectionIndicatorTargets }
        set {
            Cache.selectionIndicatorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfSelectionIndicator)
            }
        }
    }

    @IBOutlet dynamic var shadowImageTargets: [AnyObject]! {
        get { return Cache.shadowImageTargets }
        set {
            Cache.shadowImageTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfShadowImage)
            }
        }
    }

    @IBOutlet dynamic var projectIconTargets: [AnyObject]! {
        get { return Cache.projectIconTargets }
        set {
            Cache.projectIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfProjectIcon)
            }
        }
    }

}
